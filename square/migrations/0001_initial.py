# Generated by Django 5.1.1 on 2025-03-02 21:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import square.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('backend', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=100, unique=True)),
                ('access_token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('verified', models.BooleanField(default=False)),
                ('date_paid', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResultDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='SiteInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(help_text='The name of the website.', max_length=255)),
                ('site_description', models.TextField(blank=True, help_text='A brief description of the website.')),
                ('logo', models.ImageField(blank=True, help_text='The logo of the site.', null=True, upload_to='logos/')),
                ('privacy_policy', models.TextField(blank=True, help_text='Privacy policy of the website.')),
                ('terms_and_conditions', models.TextField(blank=True, help_text='Terms and conditions of the website.')),
                ('facebook_link', models.URLField(blank=True, help_text='Link to Facebook page.')),
                ('twitter_link', models.URLField(blank=True, help_text='Link to Twitter profile.')),
                ('instagram_link', models.URLField(blank=True, help_text='Link to Instagram profile.')),
                ('linkedin_link', models.URLField(blank=True, help_text='Link to LinkedIn profile.')),
                ('reddit_link', models.URLField(blank=True, help_text='Link to reddit channel.')),
                ('discord_link', models.URLField(blank=True, help_text='Link to discord channel.')),
                ('contact_email', models.EmailField(blank=True, help_text='Contact email for the site.', max_length=255)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone number for the site.', max_length=20)),
                ('address', models.TextField(blank=True, help_text='Physical address of the site or organization.')),
                ('support_email', models.EmailField(blank=True, help_text='Support email address.', max_length=255)),
                ('about_us', models.TextField(blank=True, help_text='Information about the website or company.')),
                ('newsletter_link', models.URLField(blank=True, help_text='Link to newsletter or subscription page.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('price', models.DecimalField(decimal_places=2, max_digits=6)),
                ('duration_days', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_vip', models.BooleanField(default=False)),
                ('vip_expiry', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='customuser_set', related_query_name='customuser', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_permissions_set', related_query_name='customuser', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('referee', models.CharField(blank=True, max_length=100, null=True)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('venue_name', models.CharField(blank=True, max_length=100, null=True)),
                ('venue_city', models.CharField(blank=True, max_length=100, null=True)),
                ('home_team', models.CharField(max_length=100)),
                ('home_team_logo', models.URLField(blank=True, max_length=300, null=True)),
                ('home_team_id', models.IntegerField(blank=True, null=True)),
                ('away_team', models.CharField(max_length=100)),
                ('away_team_logo', models.URLField(blank=True, max_length=300, null=True)),
                ('away_team_id', models.IntegerField(blank=True, null=True)),
                ('updated', models.BooleanField(default=False)),
                ('is_premium', models.BooleanField(default=False)),
                ('gold_bar', models.CharField(default='N/A', max_length=50)),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('feels_like', models.FloatField(blank=True, null=True)),
                ('humidity', models.FloatField(blank=True, null=True)),
                ('weather_description', models.CharField(blank=True, max_length=255, null=True)),
                ('wind_speed', models.FloatField(blank=True, null=True)),
                ('rain', models.FloatField(blank=True, null=True)),
                ('league', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='League_matches', to='backend.league')),
                ('match_date', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mechis', to='backend.matchdate')),
                ('sport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='square.sport')),
            ],
        ),
        migrations.CreateModel(
            name='FootballPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_team_win_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('home_team_expected_goals', models.IntegerField(blank=True, null=True)),
                ('home_team_win_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('draw_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('draw_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('away_team_win_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('away_team_expected_goals', models.IntegerField(blank=True, null=True)),
                ('away_team_win_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('three_way_match_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('gg_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('gg_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('no_gg_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('no_gg_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('gg_match_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('over_1_5_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('over_1_5_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('under_1_5_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('under_1_5_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('o_1_5_match_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('over_2_5_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('over_2_5_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('under_2_5_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('under_2_5_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('o_2_5_match_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('over_3_5_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('over_3_5_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('under_3_5_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('under_3_5_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('o_3_5_match_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('over_4_5_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('over_4_5_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('under_4_5_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('under_4_5_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('o_4_5_match_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('over_5_5_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('over_5_5_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('under_5_5_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('under_5_5_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('o_5_5_match_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('total_corners', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_corners_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_corners_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_corner_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('total_cards', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_cards_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_cards_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_card_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('dc12_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('dc12_normalized_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('dc12_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('dc1x_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('dc1x_normalized_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('dc1x_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('dcx2_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('dcx2_normalized_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('dcx2_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('dc_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('home_team_goals', models.IntegerField(blank=True, null=True)),
                ('away_team_goals', models.IntegerField(blank=True, null=True)),
                ('correct_score_odds', models.CharField(blank=True, max_length=50, null=True)),
                ('correct_score_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='square.match', to_field='match_id')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BasketballPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_team_win_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('home_team_expected_goals', models.IntegerField(blank=True, null=True)),
                ('home_team_win_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('draw_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('draw_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('away_team_win_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('away_team_expected_goals', models.IntegerField(blank=True, null=True)),
                ('away_team_win_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('three_way_match_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expected_goals_overtime', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('expected_goals_overtime_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('expected_goals_overtime_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('tovertime_match_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('expected_goals_halftime', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('expected_goals_halftime_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('expected_goals_halftime_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('thalftime_match_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('expected_goals_hometeam', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('expected_goals_hometeam_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('expected_goals_hometeam_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('t_hometeam_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('expected_goals_awayteam', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('expected_goals_awayteam_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('expected_goals_awayteam_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('t_awayteam_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='square.match', to_field='match_id')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MatchView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='square.match')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='square.customuser')),
            ],
        ),
        migrations.CreateModel(
            name='Fixture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fixture_id', models.IntegerField(unique=True)),
                ('fixture_date', models.DateTimeField()),
                ('status_short', models.CharField(max_length=10)),
                ('team_home', models.CharField(max_length=255)),
                ('team_away', models.CharField(max_length=255)),
                ('score_fulltime_home', models.IntegerField(blank=True, null=True)),
                ('score_fulltime_away', models.IntegerField(blank=True, null=True)),
                ('result_date', models.ForeignKey(default=square.models.get_default_result_date, on_delete=django.db.models.deletion.CASCADE, related_name='fixtures', to='square.resultdate')),
            ],
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_date', models.DateTimeField(auto_now_add=True)),
                ('expiry_date', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='square.customuser')),
                ('subscription_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='square.subscriptionplan')),
            ],
        ),
        migrations.CreateModel(
            name='TennisPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_team_win_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('home_team_expected_goals', models.IntegerField(blank=True, null=True)),
                ('home_team_win_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('draw_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('draw_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('away_team_win_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('away_team_expected_goals', models.IntegerField(blank=True, null=True)),
                ('away_team_win_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('three_way_match_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('total_games', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_games_probability', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_games_odds', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('tgame_match_result', models.CharField(choices=[('waiting', 'Waiting'), ('won', 'Won'), ('lost', 'Lost')], default='waiting', max_length=50)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='square.match', to_field='match_id')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VIPTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tip', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='square.match')),
            ],
        ),
    ]
